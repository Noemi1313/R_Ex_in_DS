murders_tibble <- as_tibble(murders)
murders_tibble
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
murders_tibble |> group_by(region)
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
murders_tibble |> group_by(region)
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
group_by(murders_tibble)
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
group_by(murders)
########## CHAPTER 4.15
# 1. Load the murders dataset. Which of the following is true?
data(murders)
murders
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
group_by(murders)
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
group_by(murders, region)
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
murders_tibble |> group_by(region)
########## CHAPTER 4.15
# 1. Load the murders dataset. Which of the following is true?
data(murders)
murders
#3. Use the group_by function to convert murders into a tibble
# that is grouped by region.
murders |> group_by(region)
# 4. Write tidyverse code that is equivalent to this code:
exp(mean(log(murders$population)))
# Write it using the pipe so that each function is called
# without arguments. Use the dot operator to access the population.
murders |> log(population) |> mean |> exp
# Write it using the pipe so that each function is called
# without arguments. Use the dot operator to access the population.
murders |> log(population) |> mean() |> exp()
murders |> log(population)
murders |> log(population)
# 4. Write tidyverse code that is equivalent to this code:
exp(mean(log(murders$population)))
# Write it using the pipe so that each function is called
# without arguments. Use the dot operator to access the population.
murders |> group_by(population)
# Write it using the pipe so that each function is called
# without arguments. Use the dot operator to access the population.
murders |> group_by(population) |> log()
# Write it using the pipe so that each function is called
# without arguments. Use the dot operator to access the population.
murders |> group_by(population) |> log()
log(murders$population)
# Write it using the pipe so that each function is called
# without arguments. Use the dot operator to access the population.
murders |> map_dbl(population, log)
# Write it using the pipe so that each function is called
# without arguments. Use the dot operator to access the population.
library(purrr)
murders |> map_dbl(population, log)
murders |> sapply(population, log)
murders |> log(.$population)
murders |> log(.$population)
murders
murders |> log(.$population)
Error: object 'population' not found
murders |> log(_$population)
murders |> log(_$population)
murders %>% log(.$population)
murders |> transform(log_population = log(population))
########## CHAPTER 4.15
# 1. Load the murders dataset. Which of the following is true?
data(murders)
murders
murders |> log(population)
murders |> log(_$population)
murders
murders |> log(_$population)
murders |> pull(.$population)
murders |> pull(population)
murders |> pull(population) |> log() |> mean() |> exp()
# 4. Write tidyverse code that is equivalent to this code:
exp(mean(log(murders$population)))
data.frame?
?data.frame?
help("data.frame")
df <- data.frame()
df
help("map_df")
murders %>% log(.$population)
df <- data.frame()
df <- data.frame() |> mutate(n)
df <- data.frame() |> mutate(n = 1:100)
df <- data.frame() |> mutate(n = c(1:100))
n100 <- 1:100
df <- data.frame() |> mutate(n = n100)
help("mutate")
df |> mutate(n = n100)
df <- data.frame(n = 1:100)
df
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through with the row number.
df <- map_df(1:100, data.frame)
df
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through with the row number.
df <- map_df(1:100, data.frame(n=.))
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
n <- x
s_n <- sum(1:x)
s_n_2 <- sum(1:x^2)
}
df <- map_df(1:100, create_df)
df
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
n <- x
s_n <- sum(1:x)
s_n_2 <- sum((1:x)^2)
}
df <- map_df(1:100, create_df)
df
df <- map_df(c(1:100), create_df)
df
ni <- data.frame(n = 1:100)
df <- map_df(ni, create_df)
df
ni <- data.frame(n = 1:100)
View(ni)
View(df)
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
s_n <- sum(1:x)
s_n_2 <- sum((1:x)^2)
}
ni <- data.frame(n = 1:100)
df <- map_df(ni, create_df)
df
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
s_n <- sum(x)
s_n_2 <- sum((x)^2)
}
ni <- data.frame(n = 1:100)
df <- map_df(ni, create_df)
df
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
s_n <- 1 + x
s_n_2 <- 1 + (x)^2
}
ni <- data.frame(n = 1:100)
df <- map_df(ni, create_df)
df
tibble(n = n, s_n = s_n, s_n_2 = s_n_2)
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
n <- 1:x
s_n <- 1 + x
s_n_2 <- 1 + (x)^2
data.frame(n = n, s_n = s_n, s_n_2 = s_n_2)
}
ni <- data.frame(n = 1:100)
df <- map_df(ni, create_df)
df
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
n <- x
s_n <- 1 + x
s_n_2 <- 1 + (x)^2
data.frame(n = n, s_n = s_n, s_n_2 = s_n_2)
}
ni <- data.frame(n = 1:100)
df <- map_df(ni, create_df)
df
df <- map_df(1:100, create_df)
df
# 5. Use the map_df to create a data frame with three columns named n,
# s_n, and s_n_2. The first column should contain the numbers 1
# through 100. The second and third columns should each contain the
# sum of 1 through n with n the row number.
create_df <- function(x){
n <- x
s_n <- 1 + x
s_n_2 <- 1 + (x)^2
data.frame(n = n, s_n = s_n, s_n_2 = s_n_2)
}
df <- map_df(1:100, create_df)
df
########## CHAPTER 5.3
path <- system.file("extdata", package = "dslabs")
files <- list.files(path)
files
library(readr)
library(readxl)
read_xls("2010_bigfive_regents.xls")
read_xls(path, "2010_bigfive_regents.xls")
read_xls(path)
help("read_xls")
path
read_xls("C:/Users/carol/AppData/Local/R/win-library/4.3/dslabs/extdata/2010_bigfive_regents.xls")
read_xls(path+"/2010_bigfive_regents.xls")
read_xls(pste(path,"/2010_bigfive_regents.xls"))
read_xls(paste(path,"/2010_bigfive_regents.xls"))
read_xls(paste(path,"/2010_bigfive_regents.xls", sep=''))
read_csv(paste(path,"/carbon_emissions.csv", sep=''))
read_lines(paste(path,"/carbon_emissions.csv", sep=''), n=3)
read_lines(paste(path,"/carbon_emissions.csv", sep=''), n_max=3)
read_lines(paste(path,"/fertility-two-countries-example.csv", sep=''), n_max=3)
read_csv(paste(path,"/carbon_emissions.csv", sep=''))
read_csv(paste(path,"/fertility-two-countries-example.csv", sep=''))
read_csv2(paste(path,"/fertility-two-countries-example.csv", sep=''))
read_csv(paste(path,"/fertility-two-countries-example.csv", sep=''))
read_lines(paste(path,"/HRlist2.txt", sep=''), n_max=3)
read_table(paste(path,"/fHRlist2.txt", sep=''))
read_table(paste(path,"/HRlist2.txt", sep=''))
read_lines(paste(path,"/life-expectancy-and-fertility-two-countries-example.csv", sep=''), n_max=3)
read_csv(paste(path,"/life-expectancy-and-fertility-two-countries-example.csv", sep=''))
read_lines(paste(path,"/murders.csv", sep=''), n_max=3)
read_csv(paste(path,"/murders.csv", sep=''))
read_lines(paste(path,"/olive.csv", sep=''), n_max=3)
read_csv(paste(path,"/olive.csv", sep=''))
read_lines(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''), n_max=3)
read_table(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''))
read_lines(paste(path,"/ssa-death-probability.csv", sep=''), n_max=3)
read_csv(paste(path,"/ssa-death-probability.csv", sep=''))
read_lines(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''))
read_table(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''))
read_csv(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''))
read_excel(paste(path,"/ssa-death-probability.csv", sep=''))
read_xls(paste(path,"/ssa-death-probability.csv", sep=''))
read_xlsx(paste(path,"/ssa-death-probability.csv", sep=''))
read_excel(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''))
read_xls(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''))
read_csv(paste(path,"/RD-Mortality-Report_2015-18-180531.pdf", sep=''))
read_csv(paste(path,"/ssa-death-probability.csv", sep=''))
read_lines(paste(path,"/olive.csv", sep=''), n_max=3)
read_csv(paste(path,"/olive.csv", sep=''))
help("read_csv")
# 2. Note that the last one, the olive file, gives us a warning.
# This is because the first line of the file is missing the header for the first column.
dat <- read_csv(paste(path,"/olive.csv", sep=''), header = FALSE)
dat
# 2. Note that the last one, the olive file, gives us a warning.
# This is because the first line of the file is missing the header for the first column.
dat <- read_csv(paste(path,"/olive.csv", sep=''), head = FALSE)
# 2. Note that the last one, the olive file, gives us a warning.
# This is because the first line of the file is missing the header for the first column.
dat <- read_table(paste(path,"/olive.csv", sep=''), head = FALSE, sep=",")
# 2. Note that the last one, the olive file, gives us a warning.
# This is because the first line of the file is missing the header for the first column.
dat <- read_table(paste(path,"/olive.csv", sep=''), header = FALSE, sep=",")
# 2. Note that the last one, the olive file, gives us a warning.
# This is because the first line of the file is missing the header for the first column.
dat <- read_csv(paste(path,"/olive.csv", sep=''), header = FALSE)
# 2. Note that the last one, the olive file, gives us a warning.
# This is because the first line of the file is missing the header for the first column.
dat <- read_csv(paste(path,"/olive.csv", sep=''), header = FALSE, skip = 1)
# 2. Note that the last one, the olive file, gives us a warning.
# This is because the first line of the file is missing the header for the first column.
dat <- read_csv(paste(path,"/olive.csv", sep=''), col_names = FALSE)
dat
# 3. A problem with the previous approach is that we don’t know what the columns represent. Type:
names(dat)
# to see that the names are not informative.
#Use the readLines function to read in just the first line (we later learn
# how to extract values from the output).
read_lines(dat, n_max=1)
# to see that the names are not informative.
#Use the readLines function to read in just the first line (we later learn
# how to extract values from the output).
readLines(dat, n_max=1)
help(readLines)
# to see that the names are not informative.
#Use the readLines function to read in just the first line (we later learn
# how to extract values from the output).
readLines(dat, 1)
# to see that the names are not informative.
#Use the readLines function to read in just the first line (we later learn
# how to extract values from the output).
readLines(paste(path,"/olive.csv", sep=''), n=1)
setwd("C:/Users/carol/Mi/RFiles")
source("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS/ExercisesRBook7.R", echo=TRUE)
source("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS/ExercisesRBook7.R", echo=TRUE)
getwd()
source("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS/ExercisesRBook7.R", echo=TRUE)
file.exists("R_Ex_in_DS/ExercisesRBook7.R")
set_wd("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS")
setwd("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS")
source("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS/ExercisesRBook7.R", echo=TRUE)
source("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS/ExercisesRBook7.R", echo=TRUE)
source("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS/ExercisesRBook7.R", echo=TRUE)
source("C:/Users/carol/Mi/RFiles/R_Exercises/R_Ex_in_DS/ExercisesRBook7.R", echo=TRUE)
tinytex::install_tinytex()
library(dslabs)
male <- heights$height[heights$sex == "Male"]
female <- heights$height[heights$sex == "Female"]
length(female)
male_n <- length(male)
female_n <- length(female)
male_n, female_n
male_n <- length(male)
female_n <- length(female)
(male_n, female_n)
male_n <- length(male)
female_n <- length(female)
c(male_n, female_n)
help(data.table)
??data.table
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
female_percentiles <- data.table(categories = categories, values = quantile(female, categories))
library(data.table)
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
female_percentiles <- data.table(categories = categories, values = quantile(female, categories))
female_percentiles
c(male_percentiles, female_percentiles)
c(male_percentiles, female_percentiles)
male_percentiles
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, values = quantile(female, categories))
male_percentiles
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, values = quantile(female, categories))
c(male_percentiles, female_percentiles)
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, values = quantile(female, categories))
df <- merge(male_percentiles, female_percentiles, by="categories")
df
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, m_values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, f_values = quantile(female, categories))
df <- merge(male_percentiles, female_percentiles, by="categories")
df
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, m_values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, f_values = quantile(female, categories))
df <- merge(male_percentiles, female_percentiles, by="categories")
class(df)
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, m_values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, f_values = quantile(female, categories))
df <- data.frame(merge(male_percentiles, female_percentiles, by="categories"))
df
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, m_values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, f_values = quantile(female, categories))
df <- data.frame(merge(male_percentiles, female_percentiles, by="categories"))
class(df)
library(data.table)
categories <- c(0.1, 0.3, 0.5, 0.7, 0.9)
male_percentiles <- data.table(categories = categories, m_values = quantile(male, categories))
female_percentiles <- data.table(categories = categories, f_values = quantile(female, categories))
df <- data.frame(merge(male_percentiles, female_percentiles, by="categories"))
df
library(dslabs)
x <- heights$height[heights$sex == "Male"]
library(dslabs)
x <- heights$height[heights$sex == "Male"]
class(x)
x <- vector(heights$height[heights$sex == "Male"])
library(dslabs)
x <- as.vector(heights$height[heights$sex == "Male"])
class(x)
library(dslabs)
x <- heights$height[heights$sex == "Male"]
x
x.head()
head(x)
x < 69
x[x < 69]
x[x > 69]
x[x > 69 & x < 72]
mean(x[x > 69 & x < 72])
filtered <- x[x > 69 & x < 72]
sum(filtered) / length(filtered)
knitr::opts_chunk$set(echo = TRUE)
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
library(dplyr)
library(ggplot2)
library(dslabs)
p <- ggplot(data = murders)
p <- ggplot(data = murders)
p <- ggplot(murders)
p <- murders |> ggplot()
class(p)
p
p <- heights |> ggplot()
p <- heights |> ggplot()
p
p <- heights |> ggplot()
class(p)
?murders
murders |> ggplot(aes(x = population, y = total)) + geom_point()
murders |> ggplot(aes(total, population)) + geom_point()
murders |> ggplot(aes(population, total)) + geom_label()
murders |> ggplot(aes(population, total, label=abb)) + geom_label()
murders |> ggplot(aes(population, total)) + geom_label()
murders |> ggplot(aes(population, total, label= abb)) + geom_label()
murders |> ggplot(aes(population, total, label= abb)) + geom_label(aes(col = blue))
murders |> ggplot(aes(population, total, label= abb)) + geom_label(aes(col = blue))
murders |> ggplot(aes(population, total, label= abb, color="blue")) + geom_label(aes(col = blue))
murders |> ggplot(aes(population, total, label= abb, color="blue")) + geom_label()
murders |> ggplot(aes(population, total, label= abb)) + geom_label(color="blue")
murders |> ggplot(aes(population, total, label= abb)) + geom_label(color=regions)
murders |> ggplot(aes(population, total, label= abb)) + geom_label(color=region)
?murders
murders |> ggplot(aes(population, total, label= abb)) + geom_label(aes(col=region))
p <- murders |>
ggplot(aes(population, total, label = abb, color = region)) +
geom_label()
murders |> ggplot(aes(population, total, label= abb, col=region)) + geom_label()
murders |> ggplot(aes(population, total, label= abb, color=region)) + geom_label()
p <- murders |>
ggplot(aes(population, total, label = abb, color = region)) +
geom_label()
p |> scale_x_log10()
p + scale_y_log10()
p + scale_x_log10()
p + scale_x_log10() + scale_y_log10()
p <- p + scale_x_log10() + scale_y_log10()
p <- p + scale_x_log10() + scale_y_log10()
p
p <- p + ggtitle("Gun murder data")
p
?heights
h <- heights <| ggplot(aes(height))
h <- heights |> ggplot(aes(height))
h
h <- h + geom_histogram()
h
h <- h + geom_histogram().
h <- h + geom_histogram()
h <- h + geom_histogram()
h
h <- h + geom_histogram(binwidth=39)
h
h <- h + geom_histogram(binwidth=1)
h
?geom_histogram()
h <- h + geom_histogram(binwidth = 1)
h
h <- h + geom_histogram(binwidth = 0.1)
h
h <- h + geom_histogram(binwidth = 0.01)
h
h <- heights |> ggplot(aes(height))
h
h + geom_histogram()
h <- h + geom_histogram(binwidth = 0.01)
h
h <- heights |> ggplot(aes(height))
h
h + geom_histogram(binwidth = 1)
murders |> ggplot(aes(heights))
heights |> ggplot(aes(height))
heights |> ggplot(aes(height)) + geom_smooth()
heights |> ggplot(aes(height)) + geom_density()
heights |> ggplot(aes(height, groups(sex))) + geom_density()
heights |> ggplot(aes(height, group_by(sex))) + geom_density()
heights |> ggplot(aes(height, group = sex)) + geom_density()
heights |> ggplot(aes(height, color = sex), geom_density())
heights |> ggplot(aes(height, color = sex) + geom_density())
heights |> ggplot(aes(height, color = sex)) + geom_density()
heights |> ggplot(aes(height, fill = sex)) + geom_density()
heights |> ggplot(aes(height, fill = sex)) + geom_density(alpha = 0.2)
heights |> ggplot(aes(height, fill = sex)) + geom_density()
heights |> ggplot(aes(height, fill = sex)) + geom_density(alpha=0.2)
murders |> ggplot(aes(population, total)) + geom_label()
#murders |> ggplot(aes(population, total)) + geom_label()
